version: '2'

services:

  nginx-proxy:
    image: jwilder/nginx-proxy:0.6.0
    networks:
      - service-network
    restart: always
    ports:
      - 80:80
      - 443:443
    volumes:
      - /var/run/docker.sock:/tmp/docker.sock:ro
      - ./nginx/dhparam:/etc/nginx/dhparam
      - ./nginx/nginx-certs:/etc/nginx/certs:ro
      - ./nginx/nginx-vhost:/etc/nginx/vhost.d
      - ./nginx/nginx-html:/usr/share/nginx/html
    labels:
      - "com.github.jrcs.letsencrypt_nginx_proxy_companion.nginx_proxy"

  letsencrypt:
    image: jrcs/letsencrypt-nginx-proxy-companion:stable
    networks:
      - service-network
    restart: always
    depends_on: [ nginx-proxy ]
    environment:
      - DEFAULT_EMAIL=contact@carbontoken.info
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./nginx/nginx-certs:/etc/nginx/certs:rw
      - ./nginx/nginx-vhost:/etc/nginx/vhost.d
      - ./nginx/nginx-html:/usr/share/nginx/html

  faucet:
    build: .
    container_name: faucet
    networks:
      - service-network
    restart: always
    environment:
      REDIS_URL: redis://redis/0
      VIRTUAL_HOST: api-faucet.carbontoken.info
      LETSENCRYPT_HOST: api-faucet.carbontoken.info
      LETSENCRYPT_EMAIL: contact@carbontoken.info
    env_file: .env
    working_dir: /home/node/app
    ports:
      - 3000:3000
    depends_on: [ redis ]
    command: node server.js
    volumes:
      - ./:/home/node/app
      - ./package.json:/home/node/app/package.json
      - ./package-lock.json:/home/node/app/package-lock.json
      - node_modules:/home/node/app/node_modules

  worker:
    build: .
    container_name: worker
    networks:
      - service-network
    restart: always
    environment:
      REDIS_URL: redis://redis/0
    env_file: .env
    working_dir: /home/node/app
    depends_on: [ redis ]
    command: node worker.js
    volumes:
      - ./:/home/node/app
      - ./package.json:/home/node/app/package.json
      - ./package-lock.json:/home/node/app/package-lock.json
      - node_modules:/home/node/app/node_modules


  redis:
    image: redis
    container_name: redis
    networks:
      - service-network
    restart: always
    ports:
      - 127.0.0.1:6379:6379
    command: [ redis-server, --appendonly, 'yes' ]
    volumes:
      - ./redis:/data

networks:
  service-network:
    external: true

volumes:
  node_modules: